// Generated by CoffeeScript 1.6.2
(function() {
  var MessageParser, chai;

  chai = require('chai');

  chai.should();

  MessageParser = require('../../../lib/messageParser').MessageParser;

  describe('MessageParser', function() {
    beforeEach(function() {
      this.parser = new MessageParser;
      this;
      return this.data = [255, 3, 255, 3, 255, 3, 255, 3, 240, 3, 221, 3, 255, 3, 255, 3, 255, 3, 255, 3, 230, 3, 208, 3, 255, 3, 255, 3, 255, 3, 255, 3, 207, 3, 171, 3, 255, 3, 255, 3, 255, 3, 255, 3, 213, 3, 175, 3, 255, 3, 255, 3, 255, 3, 255, 3, 233, 3, 206, 3, 255, 3, 255, 3, 255, 3, 255, 3, 242, 3, 225, 3, 255, 3, 255, 3, 255, 3, 255, 3, 232, 3, 211, 3, 255, 3, 255, 3, 255, 3, 255, 3, 208, 3, 173, 3, 255, 3, 255, 3, 255, 3, 255, 3, 196, 3, 154, 3, 255, 3, 255, 3, 255, 3, 255, 3, 233, 3, 204, 3];
    });
    describe('#reorganize', function() {
      return it('herps and derps', function() {
        var i, index, j, result, _i, _results;

        result = this.parser.reorganize([2, 2, 2, 3, 2, 4, 2, 5, 3, 0, 3, 1, 3, 2, 3, 3, 3, 4, 3, 5, 4, 0, 4, 1, 4, 2, 4, 3, 4, 4, 4, 5, 5, 0, 5, 1, 5, 2, 5, 3, 5, 4, 5, 5, 6, 0, 6, 1, 6, 2, 6, 3, 6, 4, 6, 5, 7, 0, 7, 1, 7, 2, 7, 3, 7, 4, 7, 5, 8, 0, 8, 1, 8, 2, 8, 3, 8, 4, 8, 5, 9, 0, 9, 1, 9, 2, 9, 3, 9, 4, 9, 5, 0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 2, 0, 2, 1]);
        index = 0;
        _results = [];
        for (i = _i = 0; _i <= 9; i = ++_i) {
          _results.push((function() {
            var _j, _results1;

            _results1 = [];
            for (j = _j = 0; _j <= 5; j = ++_j) {
              result[index++].should.eql(i);
              _results1.push(result[index++].should.eql(j));
            }
            return _results1;
          })());
        }
        return _results;
      });
    });
    describe('#mapBytes', function() {
      return it('should add 8 bit shifted ints backwards', function() {
        this.parser.mapBytes([1, 2]).should.eql(513);
        this.parser.mapBytes([2, 1]).should.eql(258);
        return this.parser.mapBytes([9, 10]).should.eql(2569);
      });
    });
    return describe('#parse', function() {
      it('creates a structure with 1 frame from 24 values', function() {
        var result, _i, _results;

        result = this.parser.parse((function() {
          _results = [];
          for (_i = 1; _i <= 24; _i++){ _results.push(_i); }
          return _results;
        }).apply(this));
        return result.frames.length.should.eql(1);
      });
      it('creates a structure with 1 frame from 26 values', function() {
        var result, _i, _results;

        result = this.parser.parse((function() {
          _results = [];
          for (_i = 1; _i <= 26; _i++){ _results.push(_i); }
          return _results;
        }).apply(this));
        return result.frames.length.should.eql(1);
      });
      it('creates a structure with 2 frames from 48 values', function() {
        var result, _i, _results;

        result = this.parser.parse((function() {
          _results = [];
          for (_i = 1; _i <= 48; _i++){ _results.push(_i); }
          return _results;
        }).apply(this));
        return result.frames.length.should.eql(2);
      });
      it('creates a structure in which each frame has 12 channels', function() {
        var result, _i, _results;

        result = this.parser.parse((function() {
          _results = [];
          for (_i = 1; _i <= 49; _i++){ _results.push(_i); }
          return _results;
        }).apply(this));
        result.frames[0].channels.length.should.eql(12);
        return result.frames[1].channels.length.should.eql(12);
      });
      it('creates a structure with frames of the correct value', function() {
        var firstVal, lastVal, result, _i, _results;

        result = this.parser.parse((function() {
          _results = [];
          for (_i = 1; _i <= 24; _i++){ _results.push(_i); }
          return _results;
        }).apply(this));
        firstVal = result.frames[0].channels[0];
        lastVal = result.frames[0].channels[11];
        return firstVal.should.eql(513);
      });
      return it('creates a structure with the correct number of frames and channels', function() {
        var result;

        this.parser = new MessageParser(6);
        result = this.parser.parse(this.data);
        result.frames.length.should.equal(10);
        return result.frames[0].channels.length.should.equal(6);
      });
    });
  });

}).call(this);
